{
	"info": {
		"_postman_id": "13d3a5d5-c5b8-4ecd-8cd8-720ee90d380b",
		"name": "Restful Booker API collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30428820"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "GET Create Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Create Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if Reason is Bad Credential\", function () {",
									"    // Here iam checking if the Reason is bad credential ",
									"    // when the post request is sent",
									"    // without Content-Type: application/json",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.reason).to.eql(\"Bad credentials\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Create Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Create Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "GetBookingIds",
					"item": [
						{
							"name": "Get Booking IDs All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Positive test: Check if the response status is 200 OK\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Positive test: Check if the response contains booking information\r",
											"pm.test(\"Response contains booking information\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"    pm.expect(pm.response.json().length).to.be.greaterThan(0);\r",
											"    pm.response.json().forEach(function(booking) {\r",
											"        pm.expect(booking).to.have.property('bookingid');\r",
											"        pm.expect(booking.bookingid).to.be.a('number');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// Negative test: Check if the response status is not 404 Not Found\r",
											"pm.test(\"Status code is not 404\", function () {\r",
											"    pm.response.to.not.have.status(404);\r",
											"});\r",
											"// Negative test: Check if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// Negative test: Check if the response body is not a JSON error message\r",
											"pm.test(\"Response is a valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking IDs Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Positive test: Check if the response status is 200 OK\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Positive test: Check if the response contains booking information\r",
											"pm.test(\"Response contains booking information\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"    pm.expect(pm.response.json().length).to.be.greaterThan(0);\r",
											"    pm.response.json().forEach(function(booking) {\r",
											"        pm.expect(booking).to.have.property('bookingid');\r",
											"        pm.expect(booking.bookingid).to.be.a('number');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// Negative test: Check if the response status is not 404 Not Found\r",
											"pm.test(\"Status code is not 404\", function () {\r",
											"    pm.response.to.not.have.status(404);\r",
											"});\r",
											"// Negative test: Check if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// Negative test: Check if the response body is not a JSON error message\r",
											"pm.test(\"Response is a valid jSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?firstname=John",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "John"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking Ids Filter By Checkin Checkout Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Positive test: Check if the response status is 200 OK\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Positive test: Check if the response contains booking information\r",
											"pm.test(\"Response contains booking information\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"    pm.expect(pm.response.json().length).to.be.greaterThan(0);\r",
											"    pm.response.json().forEach(function(booking) {\r",
											"        pm.expect(booking).to.have.property('bookingid');\r",
											"        pm.expect(booking.bookingid).to.be.a('number');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// Negative test: Check if the response status is not 404 Not Found\r",
											"pm.test(\"Status code is not 404\", function () {\r",
											"    pm.response.to.not.have.status(404);\r",
											"});\r",
											"// Negative test: Check if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// Negative test: Check if the response body is not a JSON error message\r",
											"pm.test(\"Response is a valid jSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?checkin=2014-03-13&checkout=2020-05-21",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "2014-03-13"
										},
										{
											"key": "checkout",
											"value": "2020-05-21"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking Ids Filter By Future Checkin Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Retrieve Bookings with Future Checkin Date\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?checkin=2099-12-31",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "2099-12-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking Ids Filter By Past Checkin Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Retrieve Bookings with Past Checkin Date\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?checkin=0001-12-31",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "0001-12-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking Ids Filter By Future Checkout Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Retrieve Bookings with Future Checkout Date\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?checkout=2099-12-31",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "2099-12-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking Ids Filter By Past Checkout Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Retrieve Bookings with Past Checkout Date\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?checkout=0001-12-31",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "0001-12-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking Ids NonExistent Lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Retrieve Bookings with NonExistent Lastname\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?lastname=Johndshdsjjsdj",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "lastname",
											"value": "Johndshdsjjsdj"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with Specific Lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Positive Test - Retrieve Bookings with Specific Lastname\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"    pm.expect(pm.response.json().length).to.be.greaterThan(0);\r",
											"    pm.response.json().forEach(function(booking) {\r",
											"        pm.expect(booking).to.have.property('bookingid');\r",
											"        pm.expect(booking.bookingid).to.be.a('number');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?lastname=Doe",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "lastname",
											"value": "Doe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get BookingI ds with Specific Firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Positive Test - Retrieve Bookings with Specific Firstname\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"    pm.expect(pm.response.json().length).to.be.greaterThan(0);\r",
											"    pm.response.json().forEach(function(booking) {\r",
											"        pm.expect(booking).to.have.property('bookingid');\r",
											"        pm.expect(booking.bookingid).to.be.a('number');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?firstname=John",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "John"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking Ids NonExistent Firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Retrieve Bookings with NonExistent Firstname\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking?firstname=hndshdsjjsdj",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "hndshdsjjsdj"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetBooking",
					"item": [
						{
							"name": "PositiveRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Positive Test - Retrieve Booking Details\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    pm.expect(pm.response.json()).to.eql({\r",
											"        \"firstname\": \"Jim\",\r",
											"        \"lastname\": \"Jackson\",\r",
											"        \"totalprice\": 604,\r",
											"        \"depositpaid\": false,\r",
											"        \"bookingdates\": {\r",
											"            \"checkin\": \"2022-12-07\",\r",
											"            \"checkout\": \"2023-11-09\"\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking/6",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "NegetiveRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Retrieve Nonexistent Booking\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.notFound;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking/9999",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"9999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CreateBooking",
					"item": [
						{
							"name": "PositiveCreate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Positive Test - Create Booking\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"bookingid\");\r",
											"    pm.expect(responseBody.bookingid).to.be.a(\"number\");\r",
											"\r",
											"    const expectedResponse = {\r",
											"        \"booking\": {\r",
											"            \"firstname\": \"Jim\",\r",
											"            \"lastname\": \"Brown\",\r",
											"            \"totalprice\": 111,\r",
											"            \"depositpaid\": true,\r",
											"            \"bookingdates\": {\r",
											"                \"checkin\": \"2018-01-01\",\r",
											"                \"checkout\": \"2019-01-01\"\r",
											"            },\r",
											"            \"additionalneeds\": \"Breakfast\"\r",
											"        }\r",
											"    };\r",
											"\r",
											"    pm.expect(responseBody.booking).to.eql(expectedResponse.booking);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "NegetiveCreate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Create Booking with Invalid Request\", function () {\r",
											"    pm.response.to.be.serverError;\r",
											"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateBooking",
					"item": [
						{
							"name": "PositiveUpdate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Positive Test - Update Booking Details\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    const expectedResponse = {\r",
											"        \"firstname\" : \"James\",\r",
											"        \"lastname\" : \"Brown\",\r",
											"        \"totalprice\" : 111,\r",
											"        \"depositpaid\" : true,\r",
											"        \"bookingdates\" : {\r",
											"            \"checkin\" : \"2018-01-01\",\r",
											"            \"checkout\" : \"2019-01-01\"\r",
											"        },\r",
											"        \"additionalneeds\" : \"Breakfast\"\r",
											"    };\r",
											"\r",
											"    pm.expect(pm.response.json()).to.eql(expectedResponse);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/5",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "NegetiveUpdateNonExistentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Update Nonexistent Booking\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/9999",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "NegetiveUpdateEmptyPayload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Update Nonexistent Booking\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/5",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"5"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PartialUpdateBooking",
					"item": [
						{
							"name": "PositivePartialUpdate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Positive Test - Update Booking Details\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"firstname\");\r",
											"    pm.expect(responseBody.firstname).to.be.eq(\"James\");\r",
											"    pm.expect(responseBody).to.have.property(\"lastname\");\r",
											"    pm.expect(responseBody.lastname).to.be.eq(\"Brown\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/5",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "NegetiveUpdateNonExistentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Negative Test - Update Nonexistent Booking\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/9999",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"9999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "PositiveDelete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Positive Test - Delete Booking\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"    // You may customize additional assertions based on the expected response\r",
											"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "NegetiveDelete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Positive Test - Delete Booking\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Ping",
			"item": [
				{
					"name": "PositiveHealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Positive Test - Ping\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/ping",
							"host": [
								"{{url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "NegetiveHealthCheckNonExistentEndpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Positive Test - Ping\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/nonexistent-endpoint",
							"host": [
								"{{url}}"
							],
							"path": [
								"nonexistent-endpoint"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://restful-booker.herokuapp.com",
			"type": "string"
		}
	]
}